// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* ChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRooms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRooms_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomEntered_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomEntered_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChatMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChatMessages_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatRoom_descriptor_ = file->message_type(0);
  static const int ChatRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, creator_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, room_id_),
  };
  ChatRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatRoom_descriptor_,
      ChatRoom::default_instance_,
      ChatRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, _is_default_instance_));
  ChatRooms_descriptor_ = file->message_type(1);
  static const int ChatRooms_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRooms, chat_room_),
  };
  ChatRooms_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatRooms_descriptor_,
      ChatRooms::default_instance_,
      ChatRooms_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatRooms),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRooms, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRooms, _is_default_instance_));
  CreateChatRoom_descriptor_ = file->message_type(2);
  static const int CreateChatRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, creator_nick_),
  };
  CreateChatRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateChatRoom_descriptor_,
      CreateChatRoom::default_instance_,
      CreateChatRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateChatRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, _is_default_instance_));
  EnterChatRoom_descriptor_ = file->message_type(3);
  static const int EnterChatRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, nick_),
  };
  EnterChatRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterChatRoom_descriptor_,
      EnterChatRoom::default_instance_,
      EnterChatRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnterChatRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, _is_default_instance_));
  ChatRoomEntered_descriptor_ = file->message_type(4);
  static const int ChatRoomEntered_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomEntered, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomEntered, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomEntered, room_name_),
  };
  ChatRoomEntered_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatRoomEntered_descriptor_,
      ChatRoomEntered::default_instance_,
      ChatRoomEntered_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatRoomEntered),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomEntered, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomEntered, _is_default_instance_));
  ChatMessage_descriptor_ = file->message_type(5);
  static const int ChatMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chat_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, nick_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _is_default_instance_));
  ChatMessages_descriptor_ = file->message_type(6);
  static const int ChatMessages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, chat_message_),
  };
  ChatMessages_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessages_descriptor_,
      ChatMessages::default_instance_,
      ChatMessages_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatMessages),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, _is_default_instance_));
  GetChatMessages_descriptor_ = file->message_type(7);
  static const int GetChatMessages_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatMessages, chat_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatMessages, message_id_),
  };
  GetChatMessages_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetChatMessages_descriptor_,
      GetChatMessages::default_instance_,
      GetChatMessages_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetChatMessages),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatMessages, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatMessages, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatRoom_descriptor_, &ChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatRooms_descriptor_, &ChatRooms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateChatRoom_descriptor_, &CreateChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterChatRoom_descriptor_, &EnterChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatRoomEntered_descriptor_, &ChatRoomEntered::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessages_descriptor_, &ChatMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetChatMessages_descriptor_, &GetChatMessages::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChatRoom::default_instance_;
  delete ChatRoom_reflection_;
  delete ChatRooms::default_instance_;
  delete ChatRooms_reflection_;
  delete CreateChatRoom::default_instance_;
  delete CreateChatRoom_reflection_;
  delete EnterChatRoom::default_instance_;
  delete EnterChatRoom_reflection_;
  delete ChatRoomEntered::default_instance_;
  delete ChatRoomEntered_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatMessages::default_instance_;
  delete ChatMessages_reflection_;
  delete GetChatMessages::default_instance_;
  delete GetChatMessages_reflection_;
}

void protobuf_AddDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\004chat\"D\n\010ChatRoom\022\021\n\troom_n"
    "ame\030\001 \001(\t\022\024\n\014creator_nick\030\002 \001(\t\022\017\n\007room_"
    "id\030\003 \001(\005\".\n\tChatRooms\022!\n\tchat_room\030\001 \003(\013"
    "2\016.chat.ChatRoom\"9\n\016CreateChatRoom\022\021\n\tro"
    "om_name\030\001 \001(\t\022\024\n\014creator_nick\030\002 \001(\t\"0\n\rE"
    "nterChatRoom\022\021\n\troom_name\030\001 \001(\t\022\014\n\004nick\030"
    "\002 \001(\t\"I\n\017ChatRoomEntered\022\017\n\007room_id\030\001 \001("
    "\005\022\022\n\nmessage_id\030\002 \001(\005\022\021\n\troom_name\030\003 \001(\t"
    "\"S\n\013ChatMessage\022\021\n\tchat_room\030\001 \001(\t\022\022\n\nme"
    "ssage_id\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\022\014\n\004nick\030"
    "\004 \001(\t\"7\n\014ChatMessages\022\'\n\014chat_message\030\001 "
    "\003(\0132\021.chat.ChatMessage\"8\n\017GetChatMessage"
    "s\022\021\n\tchat_room\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\005"
    "b\006proto3", 528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChatRoom::default_instance_ = new ChatRoom();
  ChatRooms::default_instance_ = new ChatRooms();
  CreateChatRoom::default_instance_ = new CreateChatRoom();
  EnterChatRoom::default_instance_ = new EnterChatRoom();
  ChatRoomEntered::default_instance_ = new ChatRoomEntered();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatMessages::default_instance_ = new ChatMessages();
  GetChatMessages::default_instance_ = new GetChatMessages();
  ChatRoom::default_instance_->InitAsDefaultInstance();
  ChatRooms::default_instance_->InitAsDefaultInstance();
  CreateChatRoom::default_instance_->InitAsDefaultInstance();
  EnterChatRoom::default_instance_->InitAsDefaultInstance();
  ChatRoomEntered::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatMessages::default_instance_->InitAsDefaultInstance();
  GetChatMessages::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoom::kRoomNameFieldNumber;
const int ChatRoom::kCreatorNickFieldNumber;
const int ChatRoom::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoom::ChatRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatRoom)
}

void ChatRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatRoom::ChatRoom(const ChatRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChatRoom)
}

void ChatRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
}

ChatRoom::~ChatRoom() {
  // @@protoc_insertion_point(destructor:chat.ChatRoom)
  SharedDtor();
}

void ChatRoom::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoom_descriptor_;
}

const ChatRoom& ChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatRoom* ChatRoom::default_instance_ = NULL;

ChatRoom* ChatRoom::New(::google::protobuf::Arena* arena) const {
  ChatRoom* n = new ChatRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatRoom)
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
}

bool ChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatRoom.room_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creator_nick;
        break;
      }

      // optional string creator_nick = 2;
      case 2: {
        if (tag == 18) {
         parse_creator_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_nick().data(), this->creator_nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatRoom.creator_nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (tag == 24) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatRoom)
  return false;
#undef DO_
}

void ChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatRoom.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatRoom.creator_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->creator_nick(), output);
  }

  // optional int32 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ChatRoom)
}

::google::protobuf::uint8* ChatRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatRoom.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatRoom.creator_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_nick(), target);
  }

  // optional int32 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatRoom)
  return target;
}

int ChatRoom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatRoom)
  int total_size = 0;

  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_nick());
  }

  // optional int32 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatRoom)
    MergeFrom(*source);
  }
}

void ChatRoom::MergeFrom(const ChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.creator_nick().size() > 0) {

    creator_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nick_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void ChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoom::CopyFrom(const ChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoom::IsInitialized() const {

  return true;
}

void ChatRoom::Swap(ChatRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoom::InternalSwap(ChatRoom* other) {
  room_name_.Swap(&other->room_name_);
  creator_nick_.Swap(&other->creator_nick_);
  std::swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoom_descriptor_;
  metadata.reflection = ChatRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoom

// optional string room_name = 1;
void ChatRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatRoom::room_name() const {
  // @@protoc_insertion_point(field_get:chat.ChatRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatRoom.room_name)
}
 void ChatRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatRoom.room_name)
}
 void ChatRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatRoom.room_name)
}
 ::std::string* ChatRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatRoom::release_room_name() {
  // @@protoc_insertion_point(field_release:chat.ChatRoom.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatRoom.room_name)
}

// optional string creator_nick = 2;
void ChatRoom::clear_creator_nick() {
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatRoom::creator_nick() const {
  // @@protoc_insertion_point(field_get:chat.ChatRoom.creator_nick)
  return creator_nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRoom::set_creator_nick(const ::std::string& value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatRoom.creator_nick)
}
 void ChatRoom::set_creator_nick(const char* value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatRoom.creator_nick)
}
 void ChatRoom::set_creator_nick(const char* value, size_t size) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatRoom.creator_nick)
}
 ::std::string* ChatRoom::mutable_creator_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatRoom.creator_nick)
  return creator_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatRoom::release_creator_nick() {
  // @@protoc_insertion_point(field_release:chat.ChatRoom.creator_nick)
  
  return creator_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRoom::set_allocated_creator_nick(::std::string* creator_nick) {
  if (creator_nick != NULL) {
    
  } else {
    
  }
  creator_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_nick);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatRoom.creator_nick)
}

// optional int32 room_id = 3;
void ChatRoom::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 ChatRoom::room_id() const {
  // @@protoc_insertion_point(field_get:chat.ChatRoom.room_id)
  return room_id_;
}
 void ChatRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatRoom.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRooms::kChatRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRooms::ChatRooms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatRooms)
}

void ChatRooms::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatRooms::ChatRooms(const ChatRooms& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChatRooms)
}

void ChatRooms::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ChatRooms::~ChatRooms() {
  // @@protoc_insertion_point(destructor:chat.ChatRooms)
  SharedDtor();
}

void ChatRooms::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRooms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRooms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRooms_descriptor_;
}

const ChatRooms& ChatRooms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatRooms* ChatRooms::default_instance_ = NULL;

ChatRooms* ChatRooms::New(::google::protobuf::Arena* arena) const {
  ChatRooms* n = new ChatRooms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRooms::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatRooms)
  chat_room_.Clear();
}

bool ChatRooms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatRooms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.ChatRoom chat_room = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_chat_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chat_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_chat_room;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatRooms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatRooms)
  return false;
#undef DO_
}

void ChatRooms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatRooms)
  // repeated .chat.ChatRoom chat_room = 1;
  for (unsigned int i = 0, n = this->chat_room_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_room(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ChatRooms)
}

::google::protobuf::uint8* ChatRooms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatRooms)
  // repeated .chat.ChatRoom chat_room = 1;
  for (unsigned int i = 0, n = this->chat_room_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chat_room(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatRooms)
  return target;
}

int ChatRooms::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatRooms)
  int total_size = 0;

  // repeated .chat.ChatRoom chat_room = 1;
  total_size += 1 * this->chat_room_size();
  for (int i = 0; i < this->chat_room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_room(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRooms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatRooms)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatRooms* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRooms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatRooms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatRooms)
    MergeFrom(*source);
  }
}

void ChatRooms::MergeFrom(const ChatRooms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatRooms)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  chat_room_.MergeFrom(from.chat_room_);
}

void ChatRooms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatRooms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRooms::CopyFrom(const ChatRooms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatRooms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRooms::IsInitialized() const {

  return true;
}

void ChatRooms::Swap(ChatRooms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRooms::InternalSwap(ChatRooms* other) {
  chat_room_.UnsafeArenaSwap(&other->chat_room_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRooms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRooms_descriptor_;
  metadata.reflection = ChatRooms_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRooms

// repeated .chat.ChatRoom chat_room = 1;
int ChatRooms::chat_room_size() const {
  return chat_room_.size();
}
void ChatRooms::clear_chat_room() {
  chat_room_.Clear();
}
const ::chat::ChatRoom& ChatRooms::chat_room(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatRooms.chat_room)
  return chat_room_.Get(index);
}
::chat::ChatRoom* ChatRooms::mutable_chat_room(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatRooms.chat_room)
  return chat_room_.Mutable(index);
}
::chat::ChatRoom* ChatRooms::add_chat_room() {
  // @@protoc_insertion_point(field_add:chat.ChatRooms.chat_room)
  return chat_room_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::ChatRoom >*
ChatRooms::mutable_chat_room() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatRooms.chat_room)
  return &chat_room_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::ChatRoom >&
ChatRooms::chat_room() const {
  // @@protoc_insertion_point(field_list:chat.ChatRooms.chat_room)
  return chat_room_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChatRoom::kRoomNameFieldNumber;
const int CreateChatRoom::kCreatorNickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChatRoom::CreateChatRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CreateChatRoom)
}

void CreateChatRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateChatRoom::CreateChatRoom(const CreateChatRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.CreateChatRoom)
}

void CreateChatRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateChatRoom::~CreateChatRoom() {
  // @@protoc_insertion_point(destructor:chat.CreateChatRoom)
  SharedDtor();
}

void CreateChatRoom::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChatRoom_descriptor_;
}

const CreateChatRoom& CreateChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CreateChatRoom* CreateChatRoom::default_instance_ = NULL;

CreateChatRoom* CreateChatRoom::New(::google::protobuf::Arena* arena) const {
  CreateChatRoom* n = new CreateChatRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CreateChatRoom)
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.CreateChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateChatRoom.room_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creator_nick;
        break;
      }

      // optional string creator_nick = 2;
      case 2: {
        if (tag == 18) {
         parse_creator_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_nick().data(), this->creator_nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateChatRoom.creator_nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.CreateChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.CreateChatRoom)
  return false;
#undef DO_
}

void CreateChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.CreateChatRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChatRoom.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChatRoom.creator_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->creator_nick(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.CreateChatRoom)
}

::google::protobuf::uint8* CreateChatRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.CreateChatRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChatRoom.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChatRoom.creator_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_nick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.CreateChatRoom)
  return target;
}

int CreateChatRoom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CreateChatRoom)
  int total_size = 0;

  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_nick());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CreateChatRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateChatRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChatRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CreateChatRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CreateChatRoom)
    MergeFrom(*source);
  }
}

void CreateChatRoom::MergeFrom(const CreateChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CreateChatRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.creator_nick().size() > 0) {

    creator_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nick_);
  }
}

void CreateChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CreateChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoom::CopyFrom(const CreateChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CreateChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoom::IsInitialized() const {

  return true;
}

void CreateChatRoom::Swap(CreateChatRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChatRoom::InternalSwap(CreateChatRoom* other) {
  room_name_.Swap(&other->room_name_);
  creator_nick_.Swap(&other->creator_nick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChatRoom_descriptor_;
  metadata.reflection = CreateChatRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChatRoom

// optional string room_name = 1;
void CreateChatRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateChatRoom::room_name() const {
  // @@protoc_insertion_point(field_get:chat.CreateChatRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChatRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateChatRoom.room_name)
}
 void CreateChatRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateChatRoom.room_name)
}
 void CreateChatRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateChatRoom.room_name)
}
 ::std::string* CreateChatRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateChatRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateChatRoom::release_room_name() {
  // @@protoc_insertion_point(field_release:chat.CreateChatRoom.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChatRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateChatRoom.room_name)
}

// optional string creator_nick = 2;
void CreateChatRoom::clear_creator_nick() {
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateChatRoom::creator_nick() const {
  // @@protoc_insertion_point(field_get:chat.CreateChatRoom.creator_nick)
  return creator_nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChatRoom::set_creator_nick(const ::std::string& value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateChatRoom.creator_nick)
}
 void CreateChatRoom::set_creator_nick(const char* value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateChatRoom.creator_nick)
}
 void CreateChatRoom::set_creator_nick(const char* value, size_t size) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateChatRoom.creator_nick)
}
 ::std::string* CreateChatRoom::mutable_creator_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateChatRoom.creator_nick)
  return creator_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateChatRoom::release_creator_nick() {
  // @@protoc_insertion_point(field_release:chat.CreateChatRoom.creator_nick)
  
  return creator_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChatRoom::set_allocated_creator_nick(::std::string* creator_nick) {
  if (creator_nick != NULL) {
    
  } else {
    
  }
  creator_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_nick);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateChatRoom.creator_nick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterChatRoom::kRoomNameFieldNumber;
const int EnterChatRoom::kNickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterChatRoom::EnterChatRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.EnterChatRoom)
}

void EnterChatRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EnterChatRoom::EnterChatRoom(const EnterChatRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.EnterChatRoom)
}

void EnterChatRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EnterChatRoom::~EnterChatRoom() {
  // @@protoc_insertion_point(destructor:chat.EnterChatRoom)
  SharedDtor();
}

void EnterChatRoom::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EnterChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterChatRoom_descriptor_;
}

const EnterChatRoom& EnterChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

EnterChatRoom* EnterChatRoom::default_instance_ = NULL;

EnterChatRoom* EnterChatRoom::New(::google::protobuf::Arena* arena) const {
  EnterChatRoom* n = new EnterChatRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.EnterChatRoom)
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EnterChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.EnterChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.EnterChatRoom.room_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // optional string nick = 2;
      case 2: {
        if (tag == 18) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.EnterChatRoom.nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.EnterChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.EnterChatRoom)
  return false;
#undef DO_
}

void EnterChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.EnterChatRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.EnterChatRoom.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.EnterChatRoom.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.EnterChatRoom)
}

::google::protobuf::uint8* EnterChatRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.EnterChatRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.EnterChatRoom.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.EnterChatRoom.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.EnterChatRoom)
  return target;
}

int EnterChatRoom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.EnterChatRoom)
  int total_size = 0;

  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // optional string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.EnterChatRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnterChatRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterChatRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.EnterChatRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.EnterChatRoom)
    MergeFrom(*source);
  }
}

void EnterChatRoom::MergeFrom(const EnterChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.EnterChatRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
}

void EnterChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.EnterChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterChatRoom::CopyFrom(const EnterChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.EnterChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterChatRoom::IsInitialized() const {

  return true;
}

void EnterChatRoom::Swap(EnterChatRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterChatRoom::InternalSwap(EnterChatRoom* other) {
  room_name_.Swap(&other->room_name_);
  nick_.Swap(&other->nick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterChatRoom_descriptor_;
  metadata.reflection = EnterChatRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterChatRoom

// optional string room_name = 1;
void EnterChatRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EnterChatRoom::room_name() const {
  // @@protoc_insertion_point(field_get:chat.EnterChatRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterChatRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.EnterChatRoom.room_name)
}
 void EnterChatRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.EnterChatRoom.room_name)
}
 void EnterChatRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.EnterChatRoom.room_name)
}
 ::std::string* EnterChatRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.EnterChatRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnterChatRoom::release_room_name() {
  // @@protoc_insertion_point(field_release:chat.EnterChatRoom.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterChatRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:chat.EnterChatRoom.room_name)
}

// optional string nick = 2;
void EnterChatRoom::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EnterChatRoom::nick() const {
  // @@protoc_insertion_point(field_get:chat.EnterChatRoom.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterChatRoom::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.EnterChatRoom.nick)
}
 void EnterChatRoom::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.EnterChatRoom.nick)
}
 void EnterChatRoom::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.EnterChatRoom.nick)
}
 ::std::string* EnterChatRoom::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.EnterChatRoom.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnterChatRoom::release_nick() {
  // @@protoc_insertion_point(field_release:chat.EnterChatRoom.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterChatRoom::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.EnterChatRoom.nick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomEntered::kRoomIdFieldNumber;
const int ChatRoomEntered::kMessageIdFieldNumber;
const int ChatRoomEntered::kRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomEntered::ChatRoomEntered()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatRoomEntered)
}

void ChatRoomEntered::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatRoomEntered::ChatRoomEntered(const ChatRoomEntered& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChatRoomEntered)
}

void ChatRoomEntered::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = 0;
  message_id_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatRoomEntered::~ChatRoomEntered() {
  // @@protoc_insertion_point(destructor:chat.ChatRoomEntered)
  SharedDtor();
}

void ChatRoomEntered::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatRoomEntered::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomEntered::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomEntered_descriptor_;
}

const ChatRoomEntered& ChatRoomEntered::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatRoomEntered* ChatRoomEntered::default_instance_ = NULL;

ChatRoomEntered* ChatRoomEntered::New(::google::protobuf::Arena* arena) const {
  ChatRoomEntered* n = new ChatRoomEntered;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomEntered::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatRoomEntered)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatRoomEntered, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatRoomEntered*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(room_id_, message_id_);
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChatRoomEntered::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatRoomEntered)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional int32 message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // optional string room_name = 3;
      case 3: {
        if (tag == 26) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatRoomEntered.room_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatRoomEntered)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatRoomEntered)
  return false;
#undef DO_
}

void ChatRoomEntered::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatRoomEntered)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->message_id(), output);
  }

  // optional string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatRoomEntered.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ChatRoomEntered)
}

::google::protobuf::uint8* ChatRoomEntered::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatRoomEntered)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->message_id(), target);
  }

  // optional string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatRoomEntered.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatRoomEntered)
  return target;
}

int ChatRoomEntered::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatRoomEntered)
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_id());
  }

  // optional string room_name = 3;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomEntered::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatRoomEntered)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatRoomEntered* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomEntered>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatRoomEntered)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatRoomEntered)
    MergeFrom(*source);
  }
}

void ChatRoomEntered::MergeFrom(const ChatRoomEntered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatRoomEntered)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
}

void ChatRoomEntered::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatRoomEntered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomEntered::CopyFrom(const ChatRoomEntered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatRoomEntered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomEntered::IsInitialized() const {

  return true;
}

void ChatRoomEntered::Swap(ChatRoomEntered* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomEntered::InternalSwap(ChatRoomEntered* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(message_id_, other->message_id_);
  room_name_.Swap(&other->room_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomEntered::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomEntered_descriptor_;
  metadata.reflection = ChatRoomEntered_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomEntered

// optional int32 room_id = 1;
void ChatRoomEntered::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 ChatRoomEntered::room_id() const {
  // @@protoc_insertion_point(field_get:chat.ChatRoomEntered.room_id)
  return room_id_;
}
 void ChatRoomEntered::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatRoomEntered.room_id)
}

// optional int32 message_id = 2;
void ChatRoomEntered::clear_message_id() {
  message_id_ = 0;
}
 ::google::protobuf::int32 ChatRoomEntered::message_id() const {
  // @@protoc_insertion_point(field_get:chat.ChatRoomEntered.message_id)
  return message_id_;
}
 void ChatRoomEntered::set_message_id(::google::protobuf::int32 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatRoomEntered.message_id)
}

// optional string room_name = 3;
void ChatRoomEntered::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatRoomEntered::room_name() const {
  // @@protoc_insertion_point(field_get:chat.ChatRoomEntered.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRoomEntered::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatRoomEntered.room_name)
}
 void ChatRoomEntered::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatRoomEntered.room_name)
}
 void ChatRoomEntered::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatRoomEntered.room_name)
}
 ::std::string* ChatRoomEntered::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatRoomEntered.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatRoomEntered::release_room_name() {
  // @@protoc_insertion_point(field_release:chat.ChatRoomEntered.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRoomEntered::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatRoomEntered.room_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kChatRoomFieldNumber;
const int ChatMessage::kMessageIdFieldNumber;
const int ChatMessage::kMessageFieldNumber;
const int ChatMessage::kNickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChatMessage)
}

void ChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chat_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:chat.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  chat_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatMessage)
  chat_room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chat_room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_room()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_room().data(), this->chat_room().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatMessage.chat_room"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional int32 message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatMessage.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nick;
        break;
      }

      // optional string nick = 4;
      case 4: {
        if (tag == 34) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatMessage.nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatMessage)
  // optional string chat_room = 1;
  if (this->chat_room().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_room().data(), this->chat_room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.chat_room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chat_room(), output);
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->message_id(), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional string nick = 4;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatMessage)
  // optional string chat_room = 1;
  if (this->chat_room().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_room().data(), this->chat_room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.chat_room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat_room(), target);
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->message_id(), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional string nick = 4;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatMessage)
  int total_size = 0;

  // optional string chat_room = 1;
  if (this->chat_room().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_room());
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_id());
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional string nick = 4;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.chat_room().size() > 0) {

    chat_room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_room_);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  chat_room_.Swap(&other->chat_room_);
  std::swap(message_id_, other->message_id_);
  message_.Swap(&other->message_);
  nick_.Swap(&other->nick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional string chat_room = 1;
void ChatMessage::clear_chat_room() {
  chat_room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::chat_room() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.chat_room)
  return chat_room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_chat_room(const ::std::string& value) {
  
  chat_room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.chat_room)
}
 void ChatMessage::set_chat_room(const char* value) {
  
  chat_room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.chat_room)
}
 void ChatMessage::set_chat_room(const char* value, size_t size) {
  
  chat_room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.chat_room)
}
 ::std::string* ChatMessage::mutable_chat_room() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.chat_room)
  return chat_room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_chat_room() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.chat_room)
  
  return chat_room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_chat_room(::std::string* chat_room) {
  if (chat_room != NULL) {
    
  } else {
    
  }
  chat_room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_room);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.chat_room)
}

// optional int32 message_id = 2;
void ChatMessage::clear_message_id() {
  message_id_ = 0;
}
 ::google::protobuf::int32 ChatMessage::message_id() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.message_id)
  return message_id_;
}
 void ChatMessage::set_message_id(::google::protobuf::int32 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.message_id)
}

// optional string message = 3;
void ChatMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.message)
}
 void ChatMessage::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.message)
}
 void ChatMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.message)
}
 ::std::string* ChatMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.message)
}

// optional string nick = 4;
void ChatMessage::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::nick() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.nick)
}
 void ChatMessage::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.nick)
}
 void ChatMessage::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.nick)
}
 ::std::string* ChatMessage::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_nick() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.nick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessages::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessages::ChatMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatMessages)
}

void ChatMessages::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatMessages::ChatMessages(const ChatMessages& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChatMessages)
}

void ChatMessages::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ChatMessages::~ChatMessages() {
  // @@protoc_insertion_point(destructor:chat.ChatMessages)
  SharedDtor();
}

void ChatMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessages_descriptor_;
}

const ChatMessages& ChatMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatMessages* ChatMessages::default_instance_ = NULL;

ChatMessages* ChatMessages::New(::google::protobuf::Arena* arena) const {
  ChatMessages* n = new ChatMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatMessages)
  chat_message_.Clear();
}

bool ChatMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.ChatMessage chat_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chat_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_chat_message;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatMessages)
  return false;
#undef DO_
}

void ChatMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatMessages)
  // repeated .chat.ChatMessage chat_message = 1;
  for (unsigned int i = 0, n = this->chat_message_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_message(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ChatMessages)
}

::google::protobuf::uint8* ChatMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatMessages)
  // repeated .chat.ChatMessage chat_message = 1;
  for (unsigned int i = 0, n = this->chat_message_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chat_message(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatMessages)
  return target;
}

int ChatMessages::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatMessages)
  int total_size = 0;

  // repeated .chat.ChatMessage chat_message = 1;
  total_size += 1 * this->chat_message_size();
  for (int i = 0; i < this->chat_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_message(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatMessages)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessages* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatMessages)
    MergeFrom(*source);
  }
}

void ChatMessages::MergeFrom(const ChatMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatMessages)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  chat_message_.MergeFrom(from.chat_message_);
}

void ChatMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessages::CopyFrom(const ChatMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessages::IsInitialized() const {

  return true;
}

void ChatMessages::Swap(ChatMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessages::InternalSwap(ChatMessages* other) {
  chat_message_.UnsafeArenaSwap(&other->chat_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessages_descriptor_;
  metadata.reflection = ChatMessages_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessages

// repeated .chat.ChatMessage chat_message = 1;
int ChatMessages::chat_message_size() const {
  return chat_message_.size();
}
void ChatMessages::clear_chat_message() {
  chat_message_.Clear();
}
const ::chat::ChatMessage& ChatMessages::chat_message(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatMessages.chat_message)
  return chat_message_.Get(index);
}
::chat::ChatMessage* ChatMessages::mutable_chat_message(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatMessages.chat_message)
  return chat_message_.Mutable(index);
}
::chat::ChatMessage* ChatMessages::add_chat_message() {
  // @@protoc_insertion_point(field_add:chat.ChatMessages.chat_message)
  return chat_message_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
ChatMessages::mutable_chat_message() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatMessages.chat_message)
  return &chat_message_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
ChatMessages::chat_message() const {
  // @@protoc_insertion_point(field_list:chat.ChatMessages.chat_message)
  return chat_message_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatMessages::kChatRoomFieldNumber;
const int GetChatMessages::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatMessages::GetChatMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.GetChatMessages)
}

void GetChatMessages::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetChatMessages::GetChatMessages(const GetChatMessages& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.GetChatMessages)
}

void GetChatMessages::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chat_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = 0;
}

GetChatMessages::~GetChatMessages() {
  // @@protoc_insertion_point(destructor:chat.GetChatMessages)
  SharedDtor();
}

void GetChatMessages::SharedDtor() {
  chat_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetChatMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChatMessages_descriptor_;
}

const GetChatMessages& GetChatMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

GetChatMessages* GetChatMessages::default_instance_ = NULL;

GetChatMessages* GetChatMessages::New(::google::protobuf::Arena* arena) const {
  GetChatMessages* n = new GetChatMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.GetChatMessages)
  chat_room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = 0;
}

bool GetChatMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.GetChatMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chat_room = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_room()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chat_room().data(), this->chat_room().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.GetChatMessages.chat_room"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional int32 message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.GetChatMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.GetChatMessages)
  return false;
#undef DO_
}

void GetChatMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.GetChatMessages)
  // optional string chat_room = 1;
  if (this->chat_room().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_room().data(), this->chat_room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GetChatMessages.chat_room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chat_room(), output);
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->message_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.GetChatMessages)
}

::google::protobuf::uint8* GetChatMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.GetChatMessages)
  // optional string chat_room = 1;
  if (this->chat_room().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chat_room().data(), this->chat_room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GetChatMessages.chat_room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat_room(), target);
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->message_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.GetChatMessages)
  return target;
}

int GetChatMessages::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.GetChatMessages)
  int total_size = 0;

  // optional string chat_room = 1;
  if (this->chat_room().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_room());
  }

  // optional int32 message_id = 2;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.GetChatMessages)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetChatMessages* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.GetChatMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.GetChatMessages)
    MergeFrom(*source);
  }
}

void GetChatMessages::MergeFrom(const GetChatMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.GetChatMessages)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.chat_room().size() > 0) {

    chat_room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_room_);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
}

void GetChatMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.GetChatMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatMessages::CopyFrom(const GetChatMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.GetChatMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatMessages::IsInitialized() const {

  return true;
}

void GetChatMessages::Swap(GetChatMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatMessages::InternalSwap(GetChatMessages* other) {
  chat_room_.Swap(&other->chat_room_);
  std::swap(message_id_, other->message_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChatMessages_descriptor_;
  metadata.reflection = GetChatMessages_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatMessages

// optional string chat_room = 1;
void GetChatMessages::clear_chat_room() {
  chat_room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetChatMessages::chat_room() const {
  // @@protoc_insertion_point(field_get:chat.GetChatMessages.chat_room)
  return chat_room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetChatMessages::set_chat_room(const ::std::string& value) {
  
  chat_room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GetChatMessages.chat_room)
}
 void GetChatMessages::set_chat_room(const char* value) {
  
  chat_room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GetChatMessages.chat_room)
}
 void GetChatMessages::set_chat_room(const char* value, size_t size) {
  
  chat_room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GetChatMessages.chat_room)
}
 ::std::string* GetChatMessages::mutable_chat_room() {
  
  // @@protoc_insertion_point(field_mutable:chat.GetChatMessages.chat_room)
  return chat_room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetChatMessages::release_chat_room() {
  // @@protoc_insertion_point(field_release:chat.GetChatMessages.chat_room)
  
  return chat_room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetChatMessages::set_allocated_chat_room(::std::string* chat_room) {
  if (chat_room != NULL) {
    
  } else {
    
  }
  chat_room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_room);
  // @@protoc_insertion_point(field_set_allocated:chat.GetChatMessages.chat_room)
}

// optional int32 message_id = 2;
void GetChatMessages::clear_message_id() {
  message_id_ = 0;
}
 ::google::protobuf::int32 GetChatMessages::message_id() const {
  // @@protoc_insertion_point(field_get:chat.GetChatMessages.message_id)
  return message_id_;
}
 void GetChatMessages::set_message_id(::google::protobuf::int32 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:chat.GetChatMessages.message_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
