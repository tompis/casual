// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channels_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  Channel_descriptor_ = file->message_type(0);
  static const int Channel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, creator_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, id_),
  };
  Channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Channel_descriptor_,
      Channel::default_instance_,
      Channel_offsets_,
      -1,
      -1,
      -1,
      sizeof(Channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _is_default_instance_));
  Channels_descriptor_ = file->message_type(1);
  static const int Channels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, channels_),
  };
  Channels_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Channels_descriptor_,
      Channels::default_instance_,
      Channels_offsets_,
      -1,
      -1,
      -1,
      sizeof(Channels),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channels, _is_default_instance_));
  CreateChannel_descriptor_ = file->message_type(2);
  static const int CreateChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannel, creator_nick_),
  };
  CreateChannel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateChannel_descriptor_,
      CreateChannel::default_instance_,
      CreateChannel_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateChannel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannel, _is_default_instance_));
  ChatMessage_descriptor_ = file->message_type(3);
  static const int ChatMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, nick_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Channel_descriptor_, &Channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Channels_descriptor_, &Channels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateChannel_descriptor_, &CreateChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete Channel::default_instance_;
  delete Channel_reflection_;
  delete Channels::default_instance_;
  delete Channels_reflection_;
  delete CreateChannel::default_instance_;
  delete CreateChannel_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
}

void protobuf_AddDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\004chat\"9\n\007Channel\022\014\n\004name\030\001 "
    "\001(\t\022\024\n\014creator_nick\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\"+\n"
    "\010Channels\022\037\n\010channels\030\001 \003(\0132\r.chat.Chann"
    "el\"3\n\rCreateChannel\022\014\n\004name\030\001 \001(\t\022\024\n\014cre"
    "ator_nick\030\002 \001(\t\"8\n\013ChatMessage\022\n\n\002id\030\001 \001"
    "(\005\022\017\n\007message\030\002 \001(\t\022\014\n\004nick\030\003 \001(\tb\006proto"
    "3", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  Channel::default_instance_ = new Channel();
  Channels::default_instance_ = new Channels();
  CreateChannel::default_instance_ = new CreateChannel();
  ChatMessage::default_instance_ = new ChatMessage();
  Channel::default_instance_->InitAsDefaultInstance();
  Channels::default_instance_->InitAsDefaultInstance();
  CreateChannel::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kNameFieldNumber;
const int Channel::kCreatorNickFieldNumber;
const int Channel::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Channel)
}

void Channel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Channel)
}

void Channel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:chat.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New(::google::protobuf::Arena* arena) const {
  Channel* n = new Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Channel)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Channel.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creator_nick;
        break;
      }

      // optional string creator_nick = 2;
      case 2: {
        if (tag == 18) {
         parse_creator_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_nick().data(), this->creator_nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Channel.creator_nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Channel)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Channel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Channel.creator_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->creator_nick(), output);
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Channel)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Channel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Channel.creator_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_nick(), target);
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Channel)
  return target;
}

int Channel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Channel)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_nick());
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Channel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.creator_nick().size() > 0) {

    creator_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nick_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {

  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  name_.Swap(&other->name_);
  creator_nick_.Swap(&other->creator_nick_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channel_descriptor_;
  metadata.reflection = Channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// optional string name = 1;
void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:chat.Channel.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Channel.name)
}
 void Channel::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Channel.name)
}
 void Channel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Channel.name)
}
 ::std::string* Channel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:chat.Channel.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chat.Channel.name)
}

// optional string creator_nick = 2;
void Channel::clear_creator_nick() {
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Channel::creator_nick() const {
  // @@protoc_insertion_point(field_get:chat.Channel.creator_nick)
  return creator_nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_creator_nick(const ::std::string& value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Channel.creator_nick)
}
 void Channel::set_creator_nick(const char* value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Channel.creator_nick)
}
 void Channel::set_creator_nick(const char* value, size_t size) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Channel.creator_nick)
}
 ::std::string* Channel::mutable_creator_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.Channel.creator_nick)
  return creator_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Channel::release_creator_nick() {
  // @@protoc_insertion_point(field_release:chat.Channel.creator_nick)
  
  return creator_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_allocated_creator_nick(::std::string* creator_nick) {
  if (creator_nick != NULL) {
    
  } else {
    
  }
  creator_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_nick);
  // @@protoc_insertion_point(field_set_allocated:chat.Channel.creator_nick)
}

// optional int32 id = 3;
void Channel::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Channel::id() const {
  // @@protoc_insertion_point(field_get:chat.Channel.id)
  return id_;
}
 void Channel::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.Channel.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channels::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channels::Channels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Channels)
}

void Channels::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Channels::Channels(const Channels& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Channels)
}

void Channels::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Channels::~Channels() {
  // @@protoc_insertion_point(destructor:chat.Channels)
  SharedDtor();
}

void Channels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Channels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channels_descriptor_;
}

const Channels& Channels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Channels* Channels::default_instance_ = NULL;

Channels* Channels::New(::google::protobuf::Arena* arena) const {
  Channels* n = new Channels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channels::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Channels)
  channels_.Clear();
}

bool Channels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Channels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.Channel channels = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_channels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Channels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Channels)
  return false;
#undef DO_
}

void Channels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Channels)
  // repeated .chat.Channel channels = 1;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Channels)
}

::google::protobuf::uint8* Channels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Channels)
  // repeated .chat.Channel channels = 1;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->channels(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Channels)
  return target;
}

int Channels::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Channels)
  int total_size = 0;

  // repeated .chat.Channel channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Channels)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Channels* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Channels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Channels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Channels)
    MergeFrom(*source);
  }
}

void Channels::MergeFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Channels)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  channels_.MergeFrom(from.channels_);
}

void Channels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channels::CopyFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channels::IsInitialized() const {

  return true;
}

void Channels::Swap(Channels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channels::InternalSwap(Channels* other) {
  channels_.UnsafeArenaSwap(&other->channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channels_descriptor_;
  metadata.reflection = Channels_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channels

// repeated .chat.Channel channels = 1;
int Channels::channels_size() const {
  return channels_.size();
}
void Channels::clear_channels() {
  channels_.Clear();
}
const ::chat::Channel& Channels::channels(int index) const {
  // @@protoc_insertion_point(field_get:chat.Channels.channels)
  return channels_.Get(index);
}
::chat::Channel* Channels::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Channels.channels)
  return channels_.Mutable(index);
}
::chat::Channel* Channels::add_channels() {
  // @@protoc_insertion_point(field_add:chat.Channels.channels)
  return channels_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::Channel >*
Channels::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:chat.Channels.channels)
  return &channels_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::Channel >&
Channels::channels() const {
  // @@protoc_insertion_point(field_list:chat.Channels.channels)
  return channels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChannel::kNameFieldNumber;
const int CreateChannel::kCreatorNickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChannel::CreateChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CreateChannel)
}

void CreateChannel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateChannel::CreateChannel(const CreateChannel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.CreateChannel)
}

void CreateChannel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateChannel::~CreateChannel() {
  // @@protoc_insertion_point(destructor:chat.CreateChannel)
  SharedDtor();
}

void CreateChannel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChannel_descriptor_;
}

const CreateChannel& CreateChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CreateChannel* CreateChannel::default_instance_ = NULL;

CreateChannel* CreateChannel::New(::google::protobuf::Arena* arena) const {
  CreateChannel* n = new CreateChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CreateChannel)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.CreateChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateChannel.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creator_nick;
        break;
      }

      // optional string creator_nick = 2;
      case 2: {
        if (tag == 18) {
         parse_creator_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_nick().data(), this->creator_nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateChannel.creator_nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.CreateChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.CreateChannel)
  return false;
#undef DO_
}

void CreateChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.CreateChannel)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChannel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChannel.creator_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->creator_nick(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.CreateChannel)
}

::google::protobuf::uint8* CreateChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.CreateChannel)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChannel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nick().data(), this->creator_nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateChannel.creator_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_nick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.CreateChannel)
  return target;
}

int CreateChannel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CreateChannel)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string creator_nick = 2;
  if (this->creator_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_nick());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CreateChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateChannel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CreateChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CreateChannel)
    MergeFrom(*source);
  }
}

void CreateChannel::MergeFrom(const CreateChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CreateChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.creator_nick().size() > 0) {

    creator_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nick_);
  }
}

void CreateChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CreateChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannel::CopyFrom(const CreateChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CreateChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannel::IsInitialized() const {

  return true;
}

void CreateChannel::Swap(CreateChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChannel::InternalSwap(CreateChannel* other) {
  name_.Swap(&other->name_);
  creator_nick_.Swap(&other->creator_nick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChannel_descriptor_;
  metadata.reflection = CreateChannel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChannel

// optional string name = 1;
void CreateChannel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateChannel::name() const {
  // @@protoc_insertion_point(field_get:chat.CreateChannel.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChannel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateChannel.name)
}
 void CreateChannel::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateChannel.name)
}
 void CreateChannel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateChannel.name)
}
 ::std::string* CreateChannel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateChannel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateChannel::release_name() {
  // @@protoc_insertion_point(field_release:chat.CreateChannel.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChannel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateChannel.name)
}

// optional string creator_nick = 2;
void CreateChannel::clear_creator_nick() {
  creator_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateChannel::creator_nick() const {
  // @@protoc_insertion_point(field_get:chat.CreateChannel.creator_nick)
  return creator_nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChannel::set_creator_nick(const ::std::string& value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateChannel.creator_nick)
}
 void CreateChannel::set_creator_nick(const char* value) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateChannel.creator_nick)
}
 void CreateChannel::set_creator_nick(const char* value, size_t size) {
  
  creator_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateChannel.creator_nick)
}
 ::std::string* CreateChannel::mutable_creator_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateChannel.creator_nick)
  return creator_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateChannel::release_creator_nick() {
  // @@protoc_insertion_point(field_release:chat.CreateChannel.creator_nick)
  
  return creator_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateChannel::set_allocated_creator_nick(::std::string* creator_nick) {
  if (creator_nick != NULL) {
    
  } else {
    
  }
  creator_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_nick);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateChannel.creator_nick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kIdFieldNumber;
const int ChatMessage::kMessageFieldNumber;
const int ChatMessage::kNickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChatMessage)
}

void ChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:chat.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatMessage)
  id_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatMessage.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional string nick = 3;
      case 3: {
        if (tag == 26) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChatMessage.nick"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChatMessage)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional string nick = 3;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatMessage)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional string nick = 3;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChatMessage.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatMessage)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  std::swap(id_, other->id_);
  message_.Swap(&other->message_);
  nick_.Swap(&other->nick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional int32 id = 1;
void ChatMessage::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 ChatMessage::id() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.id)
  return id_;
}
 void ChatMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.id)
}

// optional string message = 2;
void ChatMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.message)
}
 void ChatMessage::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.message)
}
 void ChatMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.message)
}
 ::std::string* ChatMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.message)
}

// optional string nick = 3;
void ChatMessage::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::nick() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.nick)
}
 void ChatMessage::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.nick)
}
 void ChatMessage::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.nick)
}
 ::std::string* ChatMessage::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_nick() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.nick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
