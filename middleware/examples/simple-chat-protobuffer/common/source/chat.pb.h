// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class Channel;
class ChannelId;
class ChannelName;
class ChannelNick;
class Channels;
class ChatMessage;
class MessageContents;

// ===================================================================

class ChannelId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChannelId) */ {
 public:
  ChannelId();
  virtual ~ChannelId();

  ChannelId(const ChannelId& from);

  inline ChannelId& operator=(const ChannelId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelId& default_instance();

  void Swap(ChannelId* other);

  // implements Message ----------------------------------------------

  inline ChannelId* New() const { return New(NULL); }

  ChannelId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelId& from);
  void MergeFrom(const ChannelId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ChannelId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChannelId* default_instance_;
};
// -------------------------------------------------------------------

class ChannelNick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChannelNick) */ {
 public:
  ChannelNick();
  virtual ~ChannelNick();

  ChannelNick(const ChannelNick& from);

  inline ChannelNick& operator=(const ChannelNick& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelNick& default_instance();

  void Swap(ChannelNick* other);

  // implements Message ----------------------------------------------

  inline ChannelNick* New() const { return New(NULL); }

  ChannelNick* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelNick& from);
  void MergeFrom(const ChannelNick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelNick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nick = 1;
  void clear_nick();
  static const int kNickFieldNumber = 1;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:chat.ChannelNick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChannelNick* default_instance_;
};
// -------------------------------------------------------------------

class ChannelName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChannelName) */ {
 public:
  ChannelName();
  virtual ~ChannelName();

  ChannelName(const ChannelName& from);

  inline ChannelName& operator=(const ChannelName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelName& default_instance();

  void Swap(ChannelName* other);

  // implements Message ----------------------------------------------

  inline ChannelName* New() const { return New(NULL); }

  ChannelName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelName& from);
  void MergeFrom(const ChannelName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:chat.ChannelName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChannelName* default_instance_;
};
// -------------------------------------------------------------------

class MessageContents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MessageContents) */ {
 public:
  MessageContents();
  virtual ~MessageContents();

  MessageContents(const MessageContents& from);

  inline MessageContents& operator=(const MessageContents& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageContents& default_instance();

  void Swap(MessageContents* other);

  // implements Message ----------------------------------------------

  inline MessageContents* New() const { return New(NULL); }

  MessageContents* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageContents& from);
  void MergeFrom(const MessageContents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageContents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:chat.MessageContents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static MessageContents* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Channel) */ {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();

  void Swap(Channel* other);

  // implements Message ----------------------------------------------

  inline Channel* New() const { return New(NULL); }

  Channel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chat.ChannelId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::chat::ChannelId& id() const;
  ::chat::ChannelId* mutable_id();
  ::chat::ChannelId* release_id();
  void set_allocated_id(::chat::ChannelId* id);

  // optional .chat.ChannelName name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::chat::ChannelName& name() const;
  ::chat::ChannelName* mutable_name();
  ::chat::ChannelName* release_name();
  void set_allocated_name(::chat::ChannelName* name);

  // optional .chat.ChannelNick creator = 3;
  bool has_creator() const;
  void clear_creator();
  static const int kCreatorFieldNumber = 3;
  const ::chat::ChannelNick& creator() const;
  ::chat::ChannelNick* mutable_creator();
  ::chat::ChannelNick* release_creator();
  void set_allocated_creator(::chat::ChannelNick* creator);

  // @@protoc_insertion_point(class_scope:chat.Channel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::chat::ChannelId* id_;
  ::chat::ChannelName* name_;
  ::chat::ChannelNick* creator_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// -------------------------------------------------------------------

class Channels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Channels) */ {
 public:
  Channels();
  virtual ~Channels();

  Channels(const Channels& from);

  inline Channels& operator=(const Channels& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channels& default_instance();

  void Swap(Channels* other);

  // implements Message ----------------------------------------------

  inline Channels* New() const { return New(NULL); }

  Channels* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channels& from);
  void MergeFrom(const Channels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Channels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.Channel channel = 1;
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::chat::Channel& channel(int index) const;
  ::chat::Channel* mutable_channel(int index);
  ::chat::Channel* add_channel();
  ::google::protobuf::RepeatedPtrField< ::chat::Channel >*
      mutable_channel();
  const ::google::protobuf::RepeatedPtrField< ::chat::Channel >&
      channel() const;

  // @@protoc_insertion_point(class_scope:chat.Channels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::chat::Channel > channel_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Channels* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const { return New(NULL); }

  ChatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chat.ChannelId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::chat::ChannelId& id() const;
  ::chat::ChannelId* mutable_id();
  ::chat::ChannelId* release_id();
  void set_allocated_id(::chat::ChannelId* id);

  // optional .chat.MessageContents message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::chat::MessageContents& message() const;
  ::chat::MessageContents* mutable_message();
  ::chat::MessageContents* release_message();
  void set_allocated_message(::chat::MessageContents* message);

  // optional .chat.ChannelNick nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::chat::ChannelNick& nick() const;
  ::chat::ChannelNick* mutable_nick();
  ::chat::ChannelNick* release_nick();
  void set_allocated_nick(::chat::ChannelNick* nick);

  // @@protoc_insertion_point(class_scope:chat.ChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::chat::ChannelId* id_;
  ::chat::MessageContents* message_;
  ::chat::ChannelNick* nick_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelId

// optional int32 id = 1;
inline void ChannelId::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ChannelId::id() const {
  // @@protoc_insertion_point(field_get:chat.ChannelId.id)
  return id_;
}
inline void ChannelId::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChannelId.id)
}

// -------------------------------------------------------------------

// ChannelNick

// optional string nick = 1;
inline void ChannelNick::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelNick::nick() const {
  // @@protoc_insertion_point(field_get:chat.ChannelNick.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelNick::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChannelNick.nick)
}
inline void ChannelNick::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChannelNick.nick)
}
inline void ChannelNick::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChannelNick.nick)
}
inline ::std::string* ChannelNick::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChannelNick.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelNick::release_nick() {
  // @@protoc_insertion_point(field_release:chat.ChannelNick.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelNick::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.ChannelNick.nick)
}

// -------------------------------------------------------------------

// ChannelName

// optional string name = 1;
inline void ChannelName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelName::name() const {
  // @@protoc_insertion_point(field_get:chat.ChannelName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChannelName.name)
}
inline void ChannelName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChannelName.name)
}
inline void ChannelName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChannelName.name)
}
inline ::std::string* ChannelName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.ChannelName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelName::release_name() {
  // @@protoc_insertion_point(field_release:chat.ChannelName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chat.ChannelName.name)
}

// -------------------------------------------------------------------

// MessageContents

// optional string message = 1;
inline void MessageContents::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContents::message() const {
  // @@protoc_insertion_point(field_get:chat.MessageContents.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContents::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageContents.message)
}
inline void MessageContents::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageContents.message)
}
inline void MessageContents::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageContents.message)
}
inline ::std::string* MessageContents::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageContents.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContents::release_message() {
  // @@protoc_insertion_point(field_release:chat.MessageContents.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContents::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageContents.message)
}

// -------------------------------------------------------------------

// Channel

// optional .chat.ChannelId id = 1;
inline bool Channel::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Channel::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::chat::ChannelId& Channel::id() const {
  // @@protoc_insertion_point(field_get:chat.Channel.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::chat::ChannelId* Channel::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::chat::ChannelId;
  }
  // @@protoc_insertion_point(field_mutable:chat.Channel.id)
  return id_;
}
inline ::chat::ChannelId* Channel::release_id() {
  // @@protoc_insertion_point(field_release:chat.Channel.id)
  
  ::chat::ChannelId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Channel::set_allocated_id(::chat::ChannelId* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Channel.id)
}

// optional .chat.ChannelName name = 2;
inline bool Channel::has_name() const {
  return !_is_default_instance_ && name_ != NULL;
}
inline void Channel::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
inline const ::chat::ChannelName& Channel::name() const {
  // @@protoc_insertion_point(field_get:chat.Channel.name)
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::chat::ChannelName* Channel::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::chat::ChannelName;
  }
  // @@protoc_insertion_point(field_mutable:chat.Channel.name)
  return name_;
}
inline ::chat::ChannelName* Channel::release_name() {
  // @@protoc_insertion_point(field_release:chat.Channel.name)
  
  ::chat::ChannelName* temp = name_;
  name_ = NULL;
  return temp;
}
inline void Channel::set_allocated_name(::chat::ChannelName* name) {
  delete name_;
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Channel.name)
}

// optional .chat.ChannelNick creator = 3;
inline bool Channel::has_creator() const {
  return !_is_default_instance_ && creator_ != NULL;
}
inline void Channel::clear_creator() {
  if (GetArenaNoVirtual() == NULL && creator_ != NULL) delete creator_;
  creator_ = NULL;
}
inline const ::chat::ChannelNick& Channel::creator() const {
  // @@protoc_insertion_point(field_get:chat.Channel.creator)
  return creator_ != NULL ? *creator_ : *default_instance_->creator_;
}
inline ::chat::ChannelNick* Channel::mutable_creator() {
  
  if (creator_ == NULL) {
    creator_ = new ::chat::ChannelNick;
  }
  // @@protoc_insertion_point(field_mutable:chat.Channel.creator)
  return creator_;
}
inline ::chat::ChannelNick* Channel::release_creator() {
  // @@protoc_insertion_point(field_release:chat.Channel.creator)
  
  ::chat::ChannelNick* temp = creator_;
  creator_ = NULL;
  return temp;
}
inline void Channel::set_allocated_creator(::chat::ChannelNick* creator) {
  delete creator_;
  creator_ = creator;
  if (creator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Channel.creator)
}

// -------------------------------------------------------------------

// Channels

// repeated .chat.Channel channel = 1;
inline int Channels::channel_size() const {
  return channel_.size();
}
inline void Channels::clear_channel() {
  channel_.Clear();
}
inline const ::chat::Channel& Channels::channel(int index) const {
  // @@protoc_insertion_point(field_get:chat.Channels.channel)
  return channel_.Get(index);
}
inline ::chat::Channel* Channels::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Channels.channel)
  return channel_.Mutable(index);
}
inline ::chat::Channel* Channels::add_channel() {
  // @@protoc_insertion_point(field_add:chat.Channels.channel)
  return channel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::Channel >*
Channels::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:chat.Channels.channel)
  return &channel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::Channel >&
Channels::channel() const {
  // @@protoc_insertion_point(field_list:chat.Channels.channel)
  return channel_;
}

// -------------------------------------------------------------------

// ChatMessage

// optional .chat.ChannelId id = 1;
inline bool ChatMessage::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void ChatMessage::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::chat::ChannelId& ChatMessage::id() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::chat::ChannelId* ChatMessage::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::chat::ChannelId;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.id)
  return id_;
}
inline ::chat::ChannelId* ChatMessage::release_id() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.id)
  
  ::chat::ChannelId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ChatMessage::set_allocated_id(::chat::ChannelId* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.id)
}

// optional .chat.MessageContents message = 2;
inline bool ChatMessage::has_message() const {
  return !_is_default_instance_ && message_ != NULL;
}
inline void ChatMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::chat::MessageContents& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::chat::MessageContents* ChatMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::chat::MessageContents;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.message)
  return message_;
}
inline ::chat::MessageContents* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.message)
  
  ::chat::MessageContents* temp = message_;
  message_ = NULL;
  return temp;
}
inline void ChatMessage::set_allocated_message(::chat::MessageContents* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.message)
}

// optional .chat.ChannelNick nick = 3;
inline bool ChatMessage::has_nick() const {
  return !_is_default_instance_ && nick_ != NULL;
}
inline void ChatMessage::clear_nick() {
  if (GetArenaNoVirtual() == NULL && nick_ != NULL) delete nick_;
  nick_ = NULL;
}
inline const ::chat::ChannelNick& ChatMessage::nick() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.nick)
  return nick_ != NULL ? *nick_ : *default_instance_->nick_;
}
inline ::chat::ChannelNick* ChatMessage::mutable_nick() {
  
  if (nick_ == NULL) {
    nick_ = new ::chat::ChannelNick;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.nick)
  return nick_;
}
inline ::chat::ChannelNick* ChatMessage::release_nick() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.nick)
  
  ::chat::ChannelNick* temp = nick_;
  nick_ = NULL;
  return temp;
}
inline void ChatMessage::set_allocated_nick(::chat::ChannelNick* nick) {
  delete nick_;
  nick_ = nick;
  if (nick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.nick)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
